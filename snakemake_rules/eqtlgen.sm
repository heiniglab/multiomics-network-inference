# Helper method to get list of eQTL gen hotspot snps
def get_hotspots(file):
	dict = {}
	with open(file, "r") as f:
		for line in f:
			dict[line.strip()] = line.strip()
	# remove some loci for which trans genes are not 
	# available in our data
	dict.pop("rs3130573", None)
	dict.pop("rs114105355", None)
	dict.pop("rs114905291", None)
	return(dict)

HOTSPOTS = get_hotspots("data/current/eqtl_gen/trans_hotspots.txt")

#------------------------------------------------------------------------------
# Collect range information per sentinel snp (snp genes, connecting genes, 
# eqtl genes etc)
#------------------------------------------------------------------------------
rule collect_ranges_egen:
        input:
                eqtl="data/current/eqtl_gen/trans-eQTL_significant_20181017.txt.gz",
                ppi=PPI_DB,
                tfbs_annot="results/current/tfbs_tss_annot.rds"
        output:
                DRANGES + "{sentinel}_eqtlgen.rds"
        log:
                "logs/collect_ranges_egen/{sentinel}.log"
        benchmark:
                "benchmarks/collect_ranges_egen/{sentinel}.bmk"
        threads: 1
        resources:
                mem_mb=2300
        script:
                "../scripts/collect_ranges_eqtl.R"

# -----------------------------------------------------------------------------
# Target rule to generate all hotspot ranges collections for eqtl gen and to 
# create a summary plot.
# -----------------------------------------------------------------------------
#TEMP = glob_wildcards(DRANGES + "{sentinel}_eqtlgen.rds")
rule eqtlGen_locus_summary:
	input:
		expand(DRANGES + "{sentinel}_eqtlgen.rds", sentinel=HOTSPOTS)
	output:
		"results/current/ranges/eqtlgen_summary.pdf"
	script:
		"../scripts/create_locus_summary_eqtlGen.R"

# -----------------------------------------------------------------------------
# Annotate TSS with TFBS information
# -----------------------------------------------------------------------------
rule annotate_tss_with_tf:
        input:
                tfbs_remap="data/current/tfbs/filPeaks_public.bed",
                tfbs_encode="data/current/tfbs/wgEncodeRegTfbsClusteredWithCellsV3.bed"
        output:
                tfbs_annot="results/current/tfbs_tss_annot.rds"
        script:
                "../scripts/annotate_tss_with_tf.R"


#------------------------------------------------------------------------------
# Collect cohort data for a single sentinel locus
#------------------------------------------------------------------------------
rule collect_data_eqtls:
        input:
                ranges=DRANGES + "{sentinel}_eqtlgen.rds",
                kora="results/current/ggmdata_kora.RData",
                lolipop="results/current/ggmdata_lolipop.RData",
                ceqtl="data/current/kora/eqtl/kora-cis-eqtls.csv"
        output:
                DCOHORT_DATA + "{cohort}/{sentinel}_eqtlgen.rds",
                DCOHORT_DATA + "{cohort}/{sentinel}_raw_eqtlgen.rds"
        threads: 1
        params:
                cohort="{cohort}",
                sentinel="{sentinel}"
        log:
                "logs/collect_data_eqtls/{cohort}/{sentinel}.log"
        benchmark:
                "benchmarks/collect_data_eqtls/{cohort}/{sentinel}.bmk"
        resources:
                mem_mb=20000
        script:
                "scripts/collect_data_eqtl.R"


